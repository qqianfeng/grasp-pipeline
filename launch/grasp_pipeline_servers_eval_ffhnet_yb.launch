<?xml version="1.0"?>

<launch>
    <arg name="sim"                     default="true"/>
    <arg name="launch_rosbridge"        default="true"/>
    <!-- +++++++++++++++++++ Set the params needed by the different nodes ++++++++++++++++++++++++++++++++ -->
    <param name="object_pcd_path"         value="/home/yb/object.pcd"       type="string" />
    <param name="object_pcd_enc_path"     value="/data/hdd1/qf/hithand_data/ffhnet-data/basis_point_set.npy" type="string"/>
    <param name="scene_pcd_path"          value="/home/yb/scene.pcd"        type="string" />
    <param name="object_datasets_folder"  value="/data/hdd1/qf/gazebo-objects"   type="string" />
    <param name="color_img_save_path"     value="/home/yb/scene.jpg"        type="string" />
    <param name="depth_img_save_path"     value="/home/yb/depth.png"        type="string" />

    <param name="scene_pcd_topic"         value="/camera/depth/points"      type="string" />
    <param name="color_img_topic"         value="/camera/color/image_raw"   type="string" />
    <param name="depth_img_topic"         value="/camera/depth/image_raw"   type="string" />
    <param name="/use_sim_time"           value="true"                      type="bool"   />
    <param name="ffhnet_path"             value="/home/yb/Projects/hithand_ws/src/FFHNet-dev" type="string"/>
    <param name="config_path"             value="/home/yb/Projects/hithand_ws/src/FFHNet-dev/FFHNet/config/config_ffhnet_yb.yaml" type="string"/>
    <param name="ffhnet_model_path"             value="/data/hdd1/qf/hithand_data/" type="string"/>
    <param name="use_new_config"           value="false"                      type="bool"   />

    <param name="hithand_ws_path"         value="/home/yb/Projects/hithand_ws" type="string"/>
    <param name="data_recording_path"     value="/data/hdd1/qf/sim_exp_ffhflow" type="string"/>
    <param name="visualize"               value="False"/>

    <!-- Gazebo scene manager -->
    <node name="manage_gazebo_scene_node" pkg="grasp_pipeline" type="manage_gazebo_scene_server.py" output="screen"/>

    <!-- Hand controller -->
    <node name="grasp_control_hithand_node" pkg="grasp_pipeline" type="grasp_control_sim_hithand_server.py" output="screen"/>

    <!-- Manage moveit scene -->
    <node name="manage_moveit_scene_node" pkg="grasp_pipeline"
        type="manage_moveit_scene_server.py" output="screen">
        <param name="sim" type="bool" value="$(arg sim)"/>
    </node>

    <!-- Moveit planner node for panda arm -->
    <node name="plan_arm_trajectory_server_node" pkg="grasp_pipeline" type="plan_arm_trajectory_server.py" output="screen"/>

    <!-- SMOOTH THE TRAJECTORY /-->
    <node name="get_smooth_trajectory_node" pkg="trajectory_smoothing" type="service" output="screen"/>

    <!-- Execute planned joint trajectory server-->
    <node name="execute_joint_trajectory_server_node" pkg="grasp_pipeline" type="execute_joint_trajectory_server.py" output="screen"/>

    <!-- Save visual data node -->
    <node name="save_visual_data_node" pkg="grasp_pipeline" type="save_visual_data_server.py" output="screen"/>

    <!--Launch node which advertises service to segment the table from an object -->
    <node name="object_segmentation_node" pkg="grasp_pipeline" type="segment_object_server.py" output="screen"/>

    <!-- Node to update palm and object poses-->
    <node name="update_poses_node" pkg="grasp_pipeline" type="update_object_and_palm_tf_server.py" output="screen"/>

    <!-- Node to infer grasp poses -->
    <node name="infer_grasp_poses" pkg="grasp_pipeline" type="infer_grasp_poses_server.py" output="screen"/>

    <!-- Node to handle the bps encoding-->
    <group if="$(arg launch_rosbridge)">
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
        <node pkg="tf2_web_republisher" type="tf2_web_republisher" name="tf2_web_republisher"/>
        <node name="encode_pcd_with_bps" pkg="grasp_pipeline" type="encode_pcd_with_bps.sh" output="screen"/>
    </group>

    <!-- Record grasping data -->
    <node name="record_grasp_and_collision_data_node" pkg="grasp_pipeline" type="record_grasp_and_collision_data_server.py" output="screen"/>

</launch>