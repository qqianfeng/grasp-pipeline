<?xml version="1.0"?>

<launch>
    <arg name="sim"                     default="true"/>           
    <arg name="launch_rosbridge"        default="true"/>
    <!-- +++++++++++++++++++ Set the params needed by the different nodes ++++++++++++++++++++++++++++++++ -->
    <param name="object_pcd_path"         value="/home/vm/object.pcd"       type="string" />
    <param name="scene_pcd_path"          value="/home/vm/scene.pcd"        type="string" />
    <param name="object_datasets_folder"  value="/home/vm/gazebo-objects"   type="string" />
    <param name="color_img_save_path"     value="/home/vm/scene.jpg"        type="string" />
    <param name="depth_img_save_path"     value="/home/vm/depth.pgm"        type="string" />
    <param name="scene_pcd_topic"         value="/camera/depth/points"      type="string" />
    <param name="color_img_topic"         value="/camera/color/image_raw"   type="string" />
    <param name="depth_img_topic"         value="/camera/depth/image_raw"   type="string" />   
    <param name="/use_sim_time"           value="true"                      type="bool"   />
    <param name="ffhnet_load_epoch"       value="10"                        type="int" />
    <param name="ffhnet_load_path"        value="/home/vm/hand_ws/src/FFHNet/checkpoints/2021-04-09T15_15_03" type="string" />
    
    <!-- Gazebo scene manager -->
    <node name="manage_gazebo_scene_node" pkg="grasp_pipeline" type="manage_gazebo_scene_server.py" output="screen"/>
    
    <!-- Hand controller -->
    <node name="grasp_control_hithand_node" pkg="grasp_pipeline" type="grasp_control_sim_hithand_server.py" output="screen"/>
    
    <!-- Manage moveit scene -->
    <node name="manage_moveit_scene_node" pkg="grasp_pipeline"
        type="manage_moveit_scene_server.py" output="screen">
        <param name="sim" type="bool" value="$(arg sim)"/>
    </node>

    <!-- Moveit planner node for panda arm -->
    <node name="plan_arm_trajectory_server_node" pkg="grasp_pipeline" type="plan_arm_trajectory_server.py" output="screen"/>

    <!-- SMOOTH THE TRAJECTORY /-->
    <node name="get_smooth_trajectory_node" pkg="trajectory_smoothing" type="service" output="screen"/>
    
    <!-- Execute planned joint trajectory server-->
    <node name="execute_joint_trajectory_server_node" pkg="grasp_pipeline" type="execute_joint_trajectory_server.py" output="screen"/>

    <!-- Save visual data node -->
    <node name="save_visual_data_node" pkg="grasp_pipeline" type="save_visual_data_server.py" output="screen"/>

    <!--Launch node which advertises service to segment the table from an object -->
    <node name="object_segmentation_node" pkg="grasp_pipeline" type="segment_object_server.py" output="screen"/>

    <!-- Node to update palm and object poses-->
    <node name="update_poses_node" pkg="grasp_pipeline" type="update_object_and_palm_tf_server.py" output="screen"/>

    <!-- Node to infer grasp poses -->
    <node name="infer_grasp_poses" pkg="grasp_pipeline" type="infer_grasp_poses.py" output="screen"/>

    <!-- Node to handle the bps encoding-->
    <group if="$(arg launch_rosbridge)">
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
        <node pkg="tf2_web_republisher" type="tf2_web_republisher" name="tf2_web_republisher"/>   
        <node name="encode_pcd_with_bps" pkg="grasp_pipeline" type="encode_pcd_with_bps.sh" output="screen"/>
    </group>
</launch>